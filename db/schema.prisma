// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
    provider             = "mysql"
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

model Account {
    id                       String   @id @default(cuid())
    createdAt                DateTime @default(now())
    updatedAt                DateTime @updatedAt
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?  @db.VarChar(500)
    access_token             String?  @db.VarChar(500)
    refresh_token_expires_in Int?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?  @db.Text
    session_state            String?
    oauth_token_secret       String?
    oauth_token              String?

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    expires      DateTime
    user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId       String?
}

model User {
    id            String      @id @default(cuid())
    createdAt     DateTime    @default(now())
    updatedAt     DateTime    @updatedAt
    name          String?
    email         String?     @unique
    password      String?
    emailVerified DateTime?
    company       String?     @default("kanschedule")
    image         String?
    role          String?     @default("user")
    accounts      Account[]
    sessions      Session[]
    calendar      Calendar?
    quotations    Quotation[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Quotation {
    id              String   @id @default(cuid())
    quoteId         String   @unique
    createdAt       DateTime @default(now())
    status          String   @default("Quoted(pending)")
    clientName      String?
    clientAddress   String?
    clientLat       Float?
    clientLng       Float?
    clientEmail     String?
    PONumber        String?
    salesContact    String?
    slsID           String?
    calibrationType String?
    totalHours      Int?
    totalPrice      Float?
    User            User?    @relation(fields: [userId], references: [id])
    userId          String?
}

model Van {
    id         String @id @default(cuid())
    identifier String
    start      String
    end        String
}

model Job {
    id    String  @id @default(cuid())
    Run   Run?    @relation(fields: [runId], references: [id])
    runId String?
}

model Run {
    id   String @id @default(cuid())
    jobs Job[]
}

model Event {
    id              String   @id @default(cuid())
    title           String
    start           DateTime
    end             DateTime
    allDay          Boolean  @default(false)
    color           String?
    textColor       String?
    calendar        Calendar @relation(fields: [calendarId], references: [id])
    calendarId      String
    locationAddress String?
    lat             Float?
    lng             Float?
}

model Calendar {
    id     String  @id @default(cuid())
    events Event[]
    user   User    @relation(fields: [userId], references: [id])
    userId String  @unique // relation scalar field (used in the `@relation` attribute above)
}
